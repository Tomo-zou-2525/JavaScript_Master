/* 例外処理
エラーが起きた際に適切な処置をとる動き
エラーハンドリング
*/

//Errorオブジェクト、という組み込みの物がある＿主に例外処理に使われる
const err = new Error("メールアドレスの形式が正しくありません");

//例外処理＿try...catch   if文のようなもので、tryで実行し、errorが起こればcatchで処理を実行する

//例外を明示的にスロー（throw）することもできる

//コールスタック...関数aが関数bを呼び関数cを呼び...何重にも行われる事がある。これをコールスタックという

//エラーはどのコールスタックでも捉える事ができるが、これを特定できないと例外されない処理、と呼ばれる。この際、エラー情報は保持される
//その際、大抵のJavaScript処理系では＿stack＿というプロパティが使用できる。

/* イテレータ
反復可能な概念
反復可能なオブジェクト、と、イテレータ的な要素の2つがある
これは、配列は反復可能であり、イテレータ的ではないことを指す
*/

/* generate
特殊な関数のようなもの
使用には * が付き、呼び出しにはyieldが使用される
*/

//定義
function* rainbow() {
  yield "赤";
  yield "青";
  yield "黄";
}

// 使用
const it = rainbow(); //イテレータを取得
console.log(it.next()); //赤
console.log(it.next()); //青
console.log(it.next()); //黄

/* 総評
イテレータは反復可能な要素にしたり
ジェネレータを使い、遅延する・必要に成るまで計算をしないでおく、といった柔軟な使い方ができる
*/
