/*  クラス生成・使用まで
  構文・class クラス名{

  }
ex)
  class MyClass {
    constructor(){
      console.log("クラスが初期化された")
    }
  }
  ・constructorは中身を初期化させるために使う
    外部から初期値を渡すことも出来るが、その際はconstructorの引数に初期値を入れる
*/

// オブジェクト指向のプログラムを組みたい時
// 一まとめの機能にしたいとき
// プロトタイプについて＿動的ディスパッチ＿プロトタイプチェイン＿メソッドが優先。
// アクセッサプロパティ＿プライベートメソッドみたいなもん
// 静的メソッド＝クラスメソッド
// プロトタイプチェイン_プロトタイプを探し続ける
// 継承＝superclassを忘れない
// ポリモーフィズム＝calssのインスタンスを、スーパークラスのインスタンスとして扱う

class Tomoya {
  constructor(name, age) {
    this.name = "tomoya";
    this.age = age;
  }
}

/*  継承
プロトタイプチェイン・・・クラスのインスタンス生成→クラスのプロトタイプを『継承』→オブジェクトのプロトタイプにメソッドがない場合、その親のプロトタイプを探しに行く→なければ、その親を探しに行く→最終的になければエラー→これがプロトタイプチェイン

＿extends・・・クラスを継承する際の接続子のようなもの＿
例）
class MyChild extends MyParent {
  constructor(){
    super()
  }
}
_super・・・継承の呼び出し。superクラスのコンストラクタを呼び出す。サブクラスでは必ずこれを呼び出す。

hasOwnProperty
プロパティがあるかどうかを調べるメソッド
プロトタイプチェイン
オブジェクトにはプロトタイプとよばれるコピーがある
オブジェクトにメソッドが定義されている場合、そのメソッドを探しにプロトタイプへ行く
なければその親のプロトタイプを見に行く
最終的になければエラー
これがプロトタイプチェイン

*/
